plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.wenroe'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0' // TODO - fix this vulnerability.

    // AWS SDK v2
    implementation platform('software.amazon.awssdk:bom:2.21.0')
    implementation 'software.amazon.awssdk:sts'
    implementation 'software.amazon.awssdk:ec2'
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:rds'

    implementation 'org.flywaydb:flyway-core:10.8.1'
    implementation 'org.flywaydb:flyway-database-postgresql:10.8.1'

    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'

    runtimeOnly 'org.postgresql:postgresql'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.h2database:h2'  // In-memory database for integration tests
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('bootRun') {
    // Load .env file and pass to Spring Boot
    def envFile = file('.env')
    if (envFile.exists()) {
        envFile.readLines().each { line ->
            line = line.trim()
            // Skip empty lines and comments
            if (line && !line.startsWith('#') && line.contains('=')) {
                def parts = line.split('=', 2)
                def key = parts[0].trim()
                def value = parts.length > 1 ? parts[1].trim() : ''
                if (key && value) {
                    environment key, value
                }
            }
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
}